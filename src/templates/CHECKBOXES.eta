@charset "UTF-8";
/*
Generated by Snippetor on <%= it.date %>.
This file will be overwritten if you push the button again...
*/
<%
const root = it.cfg.name;
if (it.cfg.cssFontImport) { %>
<%~ it.cfg.cssFontImport %>
<% }
function getForeground(e, light) {
    value = light ? e.lightMode.foreground : e.darkMode.foreground;
    return value ? value : '"inherit"'
}
function getBackground(e, light) {
    value = light ? e.lightMode.background : e.darkMode.background;
    return value ? value : '"transparent"'
}
function getTextDecoration(format) {
    if ( format && format.strikethrough ) {
        return "line-through";
    }
    return "none";
}
function getFontWeight(format) {
    if ( format && format.bold ) {
        return 700;
    }
    return 500;
}
function getFontStyle(format) {
    if ( format && format.italics ) {
        return "italic";
    }
    return "normal";
}
function getFontSize(format) {
    if ( format && format.fontSize ) {
        return format.fontSize;
    }
    return 14;
}
function getFont(format, fallback) {
    if ( format && format.font ) {
        return format.font;
    }
    return fallback;
}

function defineColors(i, ts) {
    const li = ts.li.syncTaskColor ? ts.checkbox : ts.li;
%>
/* '<%~ ts.data %>' for task ('- [<%~ ts.data %>]') */
.theme-dark {
    --<%~ root %>-checkbox-<%= i %>: <% tR += getForeground(ts.checkbox, false) %>;
    --<%~ root %>-checkbox-bg-<%= i %>: <% tR += getBackground(ts.checkbox, false) %>;
    --<%~ root %>-li-<%= i %>: <% tR += getForeground(li, false) %>;
    --<%~ root %>-li-bg-<%= i %>: <% tR += getBackground(li, false) %>;
}
.theme-dark .print,
.theme-light {
    --<%~ root %>-checkbox-<%= i %>: <% tR += getForeground(ts.checkbox, true) %>;
    --<%~ root %>-checkbox-bg-<%= i %>: <% tR += getBackground(ts.checkbox, true) %>;
    --<%~ root %>-li-<%= i %>: <% tR += getForeground(li, true) %>;
    --<%~ root %>-li-bg-<%= i %>: <% tR += getBackground(li, true) %>;
}
<%
} // end defineColors
function customTask(i, ts) {
%>
div[data-task="<%~ ts.data %>"],
li[data-task="<%~ ts.data %>"] {
  --checkbox-color: var(--<%~ root %>-checkbox-<%= i %>);
  --checkbox-border-color: var(--<%~ root %>-checkbox-<%= i %>);
  --checkbox-marker-color: transparent;
  <% if (ts.borderRadius) { %>
  --checkbox-radius: <%~ ts.borderRadius %>%;
  <% } %>

  color: var(--<%~ root %>-li-<%= i %>);
  background-color: var(--<%~ root %>-li-bg-<%= i %>);
}
div[data-task="<%~ ts.data %>"] input[type=checkbox]:checked,
li[data-task="<%~ ts.data %>"] input[type=checkbox]:checked {
  color: var(--checkbox-color);
  background: var(--<%~ root %>-checkbox-bg-<%= i %>);
}
div[data-task="<%~ ts.data %>"] input[type=checkbox]:checked:after,
li[data-task="<%~ ts.data %>"] input[type=checkbox]:checked:after {
    transform: none;
    -webkit-mask-image: none;
    background: unset;
    position: absolute;
    text-align: center;
    font-weight: 500;
    font-size: <%~ getFontSize(ts.checkbox.format) %>px;
    font-family: <%~ getFont(ts.checkbox.format, "var(--font-monospace)") %>;
    line-height: <%~ getFontSize(ts.checkbox.format) %>px;
<% if (ts.checkbox.top) { %>
    top: <%~ ts.checkbox.top %>px;
<% } else { %>
    top: 0;
<% }
   if (ts.checkbox.left) { %>
    left: <%~ ts.checkbox.left %>px;
<% } else { %>
    left: 1px;
<% } %>
    right: 1px;
    color: var(--checkbox-color);
    content: '<% tR += ts.checkbox.readModeData ? ts.checkbox.readModeData : ts.data %>';
}
<%
}
// UNCHECKED TASKS ---------
if (it.cfg.styleUncheckedTask && it.cfg.uncheckedTask) {
    const ts = it.cfg.uncheckedTask;
    const i = "unchecked";
    defineColors(i, ts);
    customTask(i, ts);
} // END IF UNCHECKED
// EVERYTHING ELSE ----------------
const list = it.cfg.taskSettings.filter((ts) => ts.data !== "" && ts.data != " ");
for (let i = 0; i < list.length; i++) {
    let ts = list[i];
    defineColors(i, ts);
    customTask(i, ts);
} // end if unchecked
%>
