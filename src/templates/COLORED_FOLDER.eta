/*
Generated by Snippetor on <%= it.date %>.
This file will be overwritten if you push the button again...
*/
<%
const root = it.cfg.name;

function getForeground(e, light) {
    value = light ? e.lightMode.foreground : e.darkMode.foreground;
    return value ? value : '"inherit"'
}
function getBackground(e, light) {
    value = light ? e.lightMode.background : e.darkMode.background;
    return value ? value : '"transparent"'
}
function getFontSize(folder) {
    if ( folder && folder.fontSize ) {
        return folder.fontSize;
    }
    return 14;
}
function getFont(folder, fallback) {
    if ( folder && folder.font ) {
        return folder.font;
    }
    return fallback;
}
function defineColors(i, folder) {
%>
/* for folder <%~ folder.target %> */
.theme-light {
    --<%~ root %>-folder-text-<%= i %>: <% getForeground(folder, true) %>;
    --<%~ root %>-folder-<%= i %>: <% getBackground(folder, true) %>;
    --<%~ root %>-folder-alpha2-<%= i %>: <% getBackground(folder, true) %>04;
    --<%~ root %>-folder-alpha4-<%= i %>: <% getBackground(folder, true) %>06;
    --<%~ root %>-folder-radius: 5px;
}
.theme-dark {
    --<%~ root %>-folder-text-<%= i %>: <% getForeground(folder, false) %>;
    --<%~ root %>-folder-<%= i %>: <% getBackground(folder, false) %>;
    --<%~ root %>-folder-alpha2-<%= i %>: <% getBackground(folder, false) %>CC;
    --<%~ root %>-folder-alpha4-<%= i %>: <% getBackground(folder, false) %>EE;
    --<%~ root %>-folder-radius: 5px;
}
<%
} // end defineColors
function folderSettings(i, folder) {
%>
/** Folder
The Folder Name is stored in the data-path attribute.
*/
.nav-folder-title[data-path="<%~ folder.target %>"] {
  --nav-item-color: var(--<%~ root %>-folder-text-<%= i %>);
  --nav-item-color-hover: var(--<%~ root %>-folder-alpha2-<%= i %>);
  --nav-item-size: <%~ getFontSize(folder) %>px;
  font-family: <%~ getFont(folder, "var(--text-normal)") %>;
  font-size: <%~ getFontSize(folder) %>px;
  line-height: <%~ getFontSize(folder) %>px;
  background-color: var(--<%~ root %>-folder-<%= i %>);
}
.nav-folder-title[data-path^="<%~ folder.target %>"],
.nav-file-title[data-path^="<%~ folder.target %>"],
body:not(.is-grabbing) .nav-folder-title[data-path^="<%~ folder.target %>"]:hover,
body:not(.is-grabbing) .nav-file-title[data-path^="<%~ folder.target %>"]:hover,
.nav-folder-title[data-path^="<%~ folder.target %>"].is-being-dragged,
.nav-file-title[data-path^="<%~ folder.target %>"].is-being-dragged,
.nav-folder-title[data-path^="<%~ folder.target %>"]:hover,
.nav-file-title[data-path^="<%~ folder.target %>"]:hover {
  color: var(--<%~ root %>-folder-text-<%= i %>);
}
.nav-file-title[data-path*="<%~ folder.target %>"].is-active,
.nav-folder-title[data-path*="<%~ folder.target %>"].is-active {
  color: var(--<%~ root %>-folder-text-<%= i %>);
  font-style: italic;
}
.nav-folder.mod-root .nav-folder >  .nav-folder-children > .nav-folder > .nav-folder-title[data-path^="<%~ folder.target %>"] {
    border-radius: var(--<%~ root %>-border-radius) var(--<%~ root %>-border-radius) 0px 0px;
}
.nav-folder.mod-root .nav-folder > .nav-folder-children > .nav-folder.is-collapsed > .nav-folder-title[data-path^="<%~ folder.target %>"] {
    border-radius: var(--<%~ root %>-border-radius);
}
<%
if (folder.content) {
%>
.nav-folder-title[data-path^="<%~ folder.target %>"] .nav-folder-title-content::before {
    content: "<%~ folder.content %> "
}
<%
} // end if folder.content
if (folder.includeChildren) {
%>
.nav-folder-title[data-path^="<%~ folder.target %>"] + .nav-folder-children .nav-folder-title,
.nav-folder-title[data-path^="<%~ folder.target %>"] + .nav-folder-children {
  color: var(--<%~ root %>-folder-text-<%= i %>);
  background-color: var(--<%~ root %>-folder-<%= i %>);
}
<%
} // end if includeChildren
} //end folderSettings
%>
<% if (it.cfg.hideScrollbar) { %>
/** Scrollbars eliminated */
.workspace-leaf-content[data-type="file-explorer"] ::-webkit-scrollbar {
    width: 0px;
    height: 0px;
}
<%
} // end if hideScrollbar

for (let i = 0; i<it.cfg.folders.length; i++) {
    const folder = it.cfg.folders[i];
    defineColors(i, folder);
    folderSettings(i, folder);
}

%>

