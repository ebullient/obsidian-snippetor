export const SIMPLE_TASK = `
@charset "UTF-8";
/*
Generated by Snippetor on <%= it.date %>.
This file will be overwritten if you push the button again...
*/

/** Clear settings from other themes */
.is-flashing input[type=checkbox].task-list-item-checkbox:checked:not(:hover),
.theme-dark input[type=checkbox].task-list-item-checkbox:checked:not(:hover),
.theme-light input[type=checkbox].task-list-item-checkbox:checked:not(:hover),
input[type=checkbox].task-list-item-checkbox:checked:not(:hover) {
    background-color: unset !important; /* override theme colors */
    background-image: none;
}
.markdown-preview-view input[type=checkbox].task-list-item-checkbox,
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox,
.markdown-preview-view ul > li > input[type=checkbox].task-list-item-checkbox,
.markdown-preview-view ul > li > p > input[type=checkbox].task-list-item-checkbox {
    border-color: var(--text-normal);
    color: var(--text-normal);
    -webkit-appearance: none;
    box-sizing: border-box;
    transition: background-color 200ms ease-out 0s;
    cursor: pointer;
    filter: none;
    border: 1px solid var(--text-normal);
    border-radius: 2px;
    position:relative;
}
/* Spacing for Preview mode from  default theme */
.markdown-preview-view input[type=checkbox].task-list-item-checkbox {
    margin-top: 2px;
    margin-bottom: 1px;
}
/* Spacing for Live Preview mode from  default theme */
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox {
    margin-top: 3px;
    margin-bottom: 3px;
}
<% if (it.cfg.styleUncheckedTask && it.cfg.uncheckedTask) { %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view input[type=checkbox].task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view ul > li > input[type=checkbox].task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view ul > li > p > input[type=checkbox].task-list-item-checkbox:not(:checked)::before,
<% } %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li > input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li > p > input[type=checkbox].task-list-item-checkbox:checked::before {
    font-family: var(--font-monospace);
    color: var(--text-normal);
    position: absolute;
    text-align: center;
    font-weight: 500;
    line-height: <%~ it.cfg.baseFontSize %>px;
    font-size: <%~ it.cfg.baseFontSize %>px;
    top: 0px;
    left: 1px;
    right: 1px;
}
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li > input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li > p > input[type=checkbox].task-list-item-checkbox:checked::before {
    content: "âœ“";
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task]:not([data-task=" "]),
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox + span,
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox + span + span,
.markdown-preview-view ul > li.task-list-item.is-checked {
    color: var(--text-normal);
    text-decoration: none;
}
.markdown-preview-view ul > li.task-list-item {
    font-weight: normal;
    color: var(--text-normal);
}
<%

function getForeground(e, light) {
    value = light ? e.lightMode.foreground : e.darkMode.foreground;
    return value ? value : '"inherit"'
}
function getBackground(e, light) {
    value = light ? e.lightMode.background : e.darkMode.background;
    return value ? value : '"transparent"'
}

function defineColors(i, ts) {
    const li = ts.li.syncTaskColor ? ts.checkbox : ts.li;
%>
/* '<%~ ts.data %>' for task ('- [<%~ ts.data %>]') */
/** TASK CONFIGURATION
<% tR += JSON.stringify(ts, null, 2); %>
*/
.theme-dark {
    --snippetor-checkbox-<%= i %>: <% tR += getForeground(ts.checkbox, false) %>;
    --snippetor-checkbox-bg-<%= i %>: <% tR += getBackground(ts.checkbox, false) %>;
    --snippetor-li-<%= i %>: <% tR += getForeground(li, false) %>;
    --snippetor-li-bg-<%= i %>: <% tR += getBackground(li, false) %>;
}
.theme-dark .print,
.theme-light {
    --snippetor-checkbox-<%= i %>: <% tR += getForeground(ts.checkbox, true) %>;
    --snippetor-checkbox-bg-<%= i %>: <% tR += getBackground(ts.checkbox, true) %>;
    --snippetor-li-<%= i %>: <% tR += getForeground(li, true) %>;
    --snippetor-li-bg-<%= i %>: <% tR += getBackground(li, true) %>;
}
<%
} // end defineColors

function checkboxSettings(i, ts) {
%>
    color: var(--snippetor-checkbox-<%= i %>);
    background-color: var(--snippetor-checkbox-bg-<%= i %>) !important; /* override theme */
<% if (ts.checkbox.hideBorder) { %>
    border-color: transparent !important;
<% } else { %>
    border-color: var(--snippetor-checkbox-<%= i %>) !important;
<% }
} // end checkboxSettings

function pseudoElementSettings(i, ts) {
%>
    content: '<% tR += ts.checkbox.readModeData ? ts.checkbox.readModeData : ts.data %>';
    color: var(--snippetor-checkbox-<%= i %>);
<% if (ts.checkbox.format && ts.checkbox.format.fontSize) { %>
    font-size: <%~ ts.checkbox.format.fontSize %>px;
    line-height: <%~ ts.checkbox.format.fontSize %>px;
<% }
   if (ts.checkbox.top) { %>
    top: <%~ ts.checkbox.top %>px;
<% }
   if (ts.checkbox.left) { %>
    left: <%~ ts.checkbox.left %>px;
<% } %>
<%
} // end pseudoElementSettings

function listElementSettings(i, ts) {
  if ( ts.li.format ) {
   if (ts.li.format.strikethrough) { %>
    text-decoration: line-through;
<% }
    if (ts.li.format.bold) { %>
    font-weight: 700;
<% }
    if (ts.li.format.italics) { %>
    font-style: italic;
<% }
  } %>
    color: var(--snippetor-li-<%= i %>);
    background-color: var(--snippetor-li-bg-<%= i %>);
<%
} // end listElementSettings

if (it.cfg.styleUncheckedTask && it.cfg.uncheckedTask) {
    const ts = it.cfg.uncheckedTask;
    const i = "u";
    defineColors(i, ts);
%>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view ul > li[data-task=""] > input[type=checkbox].task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view ul > li[data-task=""] > p > input[type=checkbox].task-list-item-checkbox:not(:checked)::before {
<% pseudoElementSettings(i, ts); %>
}
<% if (ts.checkbox.preventClick) { %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:not(:checked),
.markdown-preview-view ul > li[data-task=""] > input[type=checkbox].task-list-item-checkbox:not(:checked),
.markdown-preview-view ul > li[data-task=""] > p > input[type=checkbox].task-list-item-checkbox:not(:checked) {
    pointer-events: none;
    cursor: not-allowed;
}
<% } %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:not(:checked):not(:hover),
.markdown-preview-view ul > li[data-task=""] > input[type=checkbox].task-list-item-checkbox:not(:checked):not(:hover),
.markdown-preview-view ul > li[data-task=""] > p > input[type=checkbox].task-list-item-checkbox:not(:checked):not(:hover) {
<% checkboxSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=""],
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox[data-task=""] + span,
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox[data-task=""] + span + span,
.markdown-preview-view ul > li.task-list-item:not(.is-checked) {
<% listElementSettings(i, ts); %>
}
<% } // end if unchecked %>

<%
const list = it.cfg.taskSettings.filter((ts) => ts.data !== "" && ts.data != " ");
for (let i = 0; i < list.length; i++) {
   let ts = list[i];
   defineColors(i, ts); %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox[data-task="<%~ ts.data %>"]::before,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > input[type=checkbox].task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > p > input[type=checkbox].task-list-item-checkbox:checked::before {
<% pseudoElementSettings(i, ts); %>
}
<% if (ts.checkbox.preventClick) { %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox,
.markdown-preview-view ul > li[data-task=""] > input[type=checkbox].task-list-item-checkbox,
.markdown-preview-view ul > li[data-task=""] > p > input[type=checkbox].task-list-item-checkbox {
    pointer-events: none;
    cursor: not-allowed;
}
<% } %>
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox[data-task="<%~ ts.data %>"]:not(:hover),
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > input[type=checkbox].task-list-item-checkbox:not(:hover),
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > p > input[type=checkbox].task-list-item-checkbox:not(:hover) {
<% checkboxSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task="<%~ ts.data %>"],
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox[data-task="<%~ ts.data %>"] + span,
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox[data-task="<%~ ts.data %>"] + span + span,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"].task-list-item.is-checked {
<% listElementSettings(i, ts); %>
}
<% } // end if unchecked %>

/* Consistent hover colors */
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:hover,
.markdown-source-view.mod-cm6 input[type=checkbox].task-list-item-checkbox:checked:hover,
<% it.cfg.taskSettings.forEach(function(ts){ %>
.markdown-preview-view li[data-task="<%~ ts.data %>"] > input[type=checkbox].task-list-item-checkbox:checked:hover,
.markdown-preview-view li[data-task="<%~ ts.data %>"] > p > input[type=checkbox].task-list-item-checkbox:checked:hover,
<% }) %>
.markdown-preview-view input[type=checkbox].task-list-item-checkbox:hover {
    color: var(--text-on-accent) !important;
    background-color: var(--interactive-accent-hover) !important;
    border-color: var(--text-on-accent) !important;
}
`;
