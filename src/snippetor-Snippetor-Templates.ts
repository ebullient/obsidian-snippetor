export const SIMPLE_TASK = `
@charset "UTF-8";
/*
Generated by Snippetor on <%= it.date %>.
This file will be overwritten if you push the button again...
*/
<%
function getForeground(e, light) {
    value = light ? e.lightMode.foreground : e.darkMode.foreground;
    return value ? value : '"inherit"'
}
function getBackground(e, light) {
    value = light ? e.lightMode.background : e.darkMode.background;
    return value ? value : '"transparent"'
}
function getTextDecoration(format) {
    if ( format && format.strikethrough ) {
        return "line-through";
    }
    return "none";
}
function getFontWeight(format) {
    if ( format && format.bold ) {
        return 700;
    }
    return 500;
}
function getFontStyle(format) {
    if ( format && format.italics ) {
        return "italic";
    }
    return "normal";
}
function getFontSize(format) {
    if ( format && format.fontSize ) {
        return format.fontSize;
    }
    return 14;
}

function defineColors(i, ts) {
    const li = ts.li.syncTaskColor ? ts.checkbox : ts.li;
%>
/* '<%~ ts.data %>' for task ('- [<%~ ts.data %>]') */
.theme-dark {
    --snippetor-checkbox-<%= i %>: <% tR += getForeground(ts.checkbox, false) %>;
    --snippetor-checkbox-bg-<%= i %>: <% tR += getBackground(ts.checkbox, false) %>;
    --snippetor-li-<%= i %>: <% tR += getForeground(li, false) %>;
    --snippetor-li-bg-<%= i %>: <% tR += getBackground(li, false) %>;
}
.theme-dark .print,
.theme-light {
    --snippetor-checkbox-<%= i %>: <% tR += getForeground(ts.checkbox, true) %>;
    --snippetor-checkbox-bg-<%= i %>: <% tR += getBackground(ts.checkbox, true) %>;
    --snippetor-li-<%= i %>: <% tR += getForeground(li, true) %>;
    --snippetor-li-bg-<%= i %>: <% tR += getBackground(li, true) %>;
}
<%
} // end defineColors

function checkboxSettings(i, ts) {
%>
    position: relative;
    -webkit-appearance: none;
    box-sizing: border-box;
    background: var(--snippetor-checkbox-bg-<%= i %>) !important; /* override theme */
    filter: none;
    color: var(--snippetor-checkbox-<%= i %>);
    font-family: var(--font-monospace);
    border-width: 1px;
    border-style: solid;
<% if (ts.checkbox.preventClick) { %>
    pointer-events: none;
    cursor: not-allowed;
<% } %>
<% if (ts.checkbox.hideBorder) { %>
    border-color: transparent !important;
<% } else { %>
    border-color: var(--snippetor-checkbox-<%= i %>) !important;
<% }
} // end checkboxSettings

function pseudoElementSettings(i, ts) {
%>
    font-family: var(--font-monospace);
    background: none;
    position: absolute;
    text-align: center;
    font-weight: 500;
    font-size: <%~ getFontSize(ts.li.format) %>px;
    line-height: <%~ getFontSize(ts.li.format) %>px;
<% if (ts.checkbox.top) { %>
    top: <%~ ts.checkbox.top %>px;
<% } else { %>
    top: 0;
<% }
   if (ts.checkbox.left) { %>
    left: <%~ ts.checkbox.left %>px;
<% } else { %>
    left: 1px;
<% } %>
    right: 1px;
    color: var(--snippetor-checkbox-<%= i %>);
    content: '<% tR += ts.checkbox.readModeData ? ts.checkbox.readModeData : ts.data %>';
<%
} // end pseudoElementSettings

function listElementSettings(i, ts) {
%>
    text-decoration: <%~ getTextDecoration(ts.li.format) %> !important; /* override theme */
    font-weight: <%~ getFontWeight(ts.li.format) %>;
    font-style: <%~ getFontStyle(ts.li.format) %>;
    color: var(--snippetor-li-<%= i %>);
    background-color: var(--snippetor-li-bg-<%= i %>);
<%
} // end listElementSettings

// UNCHECKED TASKS ---------
if (it.cfg.styleUncheckedTask && it.cfg.uncheckedTask) {
    const ts = it.cfg.uncheckedTask;
    const i = "u";
    defineColors(i, ts);
%>
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=" "] input[type=checkbox][data-task=" "].task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view ul.contains-task-list > li[data-task=""].task-list-item input[type=checkbox].task-list-item-checkbox:not(:checked)::before {
<% pseudoElementSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=" "] input[type=checkbox][data-task=" "].task-list-item-checkbox:not(:checked),
.markdown-preview-view ul.contains-task-list > li[data-task=""].task-list-item input[type=checkbox].task-list-item-checkbox:not(:checked) {
<% checkboxSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=" "],
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=" "] input[type=checkbox].task-list-item-checkbox[data-task=" "] + span,
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=" "] input[type=checkbox].task-list-item-checkbox[data-task=" "] + span + span,
.markdown-preview-view ul.contains-task-list > li[data-task=""].task-list-item:not(.is-checked) {
<% listElementSettings(i, ts); %>
}
<% } // END IF UNCHECKED

// EVERYTHING ELSE ----------------
const list = it.cfg.taskSettings.filter((ts) => ts.data !== "" && ts.data != " ");
for (let i = 0; i < list.length; i++) {
   let ts = list[i];
   defineColors(i, ts); %>
.markdown-source-view.mod-cm6  .HyperMD-task-line[data-task="<%~ ts.data %>"] input[type=checkbox][data-task="<%~ ts.data %>"].task-list-item-checkbox:checked::before,
.markdown-preview-view ul.contains-task-list > li[data-task="<%~ ts.data %>"].task-list-item input[type=checkbox].task-list-item-checkbox:checked::before {
<% pseudoElementSettings(i, ts); %>
}
.markdown-source-view.mod-cm6  .HyperMD-task-line[data-task="<%~ ts.data %>"] input[type=checkbox][data-task="<%~ ts.data %>"].task-list-item-checkbox:checked,
.markdown-preview-view ul.contains-task-list > li[data-task="<%~ ts.data %>"].task-list-item input[type=checkbox].task-list-item-checkbox:checked {
<% checkboxSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task="<%~ ts.data %>"],
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task="<%~ ts.data %>"] input[type=checkbox].task-list-item-checkbox[data-task="<%~ ts.data %>"] + span,
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task="<%~ ts.data %>"] input[type=checkbox].task-list-item-checkbox[data-task="<%~ ts.data %>"] + span + span,
.markdown-preview-view ul.contains-task-list > li[data-task="<%~ ts.data %>"].task-list-item.is-checked {
<% listElementSettings(i, ts); %>
}
<% } // end if unchecked %>

/* Consistent hover colors */
<% if (it.cfg.styleUncheckedTask && it.cfg.uncheckedTask) { %>
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task=" "] input[type=checkbox][data-task=" "].task-list-item-checkbox:not(:checked):hover,
.markdown-preview-view ul.contains-task-list > li[data-task=""].task-list-item input[type=checkbox].task-list-item-checkbox:not(:checked):hover,
<% } %>
<%
const max = it.cfg.taskSettings.length - 1;
for (let i = 0; i <= max; i++) {
   let ts = it.cfg.taskSettings[i];
   console.log(i, ts);
%>
.markdown-source-view.mod-cm6  .HyperMD-task-line[data-task="<%~ ts.data %>"] input[type=checkbox][data-task="<%~ ts.data %>"].task-list-item-checkbox:checked:hover,
.markdown-preview-view ul.contains-task-list > li[data-task="<%~ ts.data %>"].task-list-item input[type=checkbox].task-list-item-checkbox:checked:hover<% tR += (i < max) ? ',' : '{' %>
<% } %>
    color: var(--text-on-accent) !important;
    background-color: var(--interactive-accent-hover) !important;
    border-color: var(--text-on-accent) !important;
}
`;
