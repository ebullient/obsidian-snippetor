export const SIMPLE_TASK = `
@charset "UTF-8";
/*
Generated by Snippetor on <%= it.date %>.
This file will be overwritten if you push the button again...
*/

<% if (it.cfg.clearThemeBackground) { %>
/** Clear settings from other themes */
.checklist-plugin-main .group .compact > .toggle .checked,
.is-flashing input[type=checkbox]:checked,
input[type=checkbox]:checked {
    background-color: unset !important;
}
<% } %>
.markdown-preview-view input.task-list-item-checkbox,
.markdown-source-view.mod-cm6 input.task-list-item-checkbox,
.markdown-preview-view ul > li > input.task-list-item-checkbox,
.markdown-preview-view ul > li > p > input.task-list-item-checkbox {
    border-color: var(--text-normal);
    color: var(--text-normal);
    -webkit-appearance: none;
    box-sizing: border-box;
    transition: background-color 200ms ease-out 0s;
    cursor: pointer;
    filter: none;
    border: 1px solid var(--text-normal);
    border-radius: 2px;
    position:relative;
}
.markdown-preview-view input.task-list-item-checkbox {
    margin-top: 2px;
    margin-bottom: 1px;
}
.markdown-source-view.mod-cm6 input.task-list-item-checkbox {
    margin-top: 3px;
    margin-bottom: 3px;
}
.markdown-source-view.mod-cm6 input.task-list-item-checkbox:checked::before,
.markdown-preview-view input.task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li > input.task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li > p > input.task-list-item-checkbox:checked::before
 {
    font-family: var(--font-monospace);
    content: "âœ“";
    color: var(--text-normal);
    position: absolute;
    text-align: center;
    font-weight: 500;
    line-height: 14px;
    font-size: 14px;
    left: 1px;
    right: 1px;
}
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task]:not([data-task=" "]),
.markdown-source-view.mod-cm6 input.task-list-item-checkbox + span,
.markdown-source-view.mod-cm6 input.task-list-item-checkbox + span + span,
.markdown-preview-view ul > li.task-list-item.is-checked {
    color: var(--text-normal);
    text-decoration: none;
}
.markdown-preview-view ul > li.task-list-item {
    font-weight: normal;
    color: var(--text-normal);
}
<%
function defineColors(i, ts) {
%>

/* '<%~ ts.data %>' for task ('- [<%~ ts.data %>]') */
.theme-dark {
    --snippetor-checkbox-<%= i %>: <% tR += ts.taskColorDark ? ts.taskColorDark : "inherit" %>;
    --snippetor-checkbox-bg-<%= i %>: <% tR += ts.bgColorDark ? ts.bgColorDark : "transparent" %>;
}
.theme-dark .print,
.theme-light {
    --snippetor-checkbox-<%= i %>: <% tR += ts.taskColorLight ? ts.taskColorLight : "inherit" %>;
    --snippetor-checkbox-bg-<%= i %>: <% tR += ts.bgColorLight ? ts.bgColorLight : "transparent" %>;
}
<%
} // end defineColors

function checkboxSettings(i, ts) {
%>
    color: var(--snippetor-checkbox-<%= i %>);
<% if (ts.hideBorder) { %>
    border-color: transparent;
<% } else { %>
    border-color: var(--snippetor-checkbox-<%= i %>);
<% } %>
<% if (ts.applyTextBgColor) { %>
    background-color: var(--snippetor-checkbox-bg-<%= i %>);
<% }
} // end checkboxSettings

function pseudoElementSettings(i, ts) {
%>
    content: '<% tR += ts.reader ? ts.reader : ts.data %>';
    color: var(--snippetor-checkbox-<%= i %>);
<%
} // end pseudoElementSettings

function listElementSettings(i, ts) {
  if (ts.strikethrough) { %>
    text-decoration: line-through;
<% } %>
<% if (ts.applyTextColor) { %>
    color: var(--snippetor-checkbox-<%= i %>);
<% } %>
<% if (ts.applyTextBgColor) { %>
    background-color: var(--snippetor-checkbox-bg-<%= i %>);
<% }
} // end listElementSettings

if (it.cfg.styleUncheckedTask && it.cfg.uncheckedTask) {
    const ts = it.cfg.uncheckedTask;
    const i = "u";
    defineColors(i, ts);
%>
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"]::before,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > input.task-list-item-checkbox:not(:checked)::before,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > p > input.task-list-item-checkbox:not(:checked)::before {
<% pseudoElementSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"],
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > input.task-list-item-checkbox,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > p > input.task-list-item-checkbox {
<% checkboxSettings(i, ts); %>
}
<% if (ts.strikethrough || ts.applyTextColor || ts.applyTextBgColor) { %>
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task="<%~ ts.data %>"],
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"] + span,
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"] + span + span,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"].task-list-item:not(.is-checked) {
<% listElementSettings(i, ts); %>
}
<% } // end strikethrough || applyTextColor || applyTextBgColor%>
<% } // end if unchecked %>

<%
const list = it.cfg.taskSettings.filter((ts) => ts.data !== "" && ts.data != " ");
for (let i = 0; i < list.length; i++) {
   let ts = list[i];
   defineColors(i, ts); %>
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"]::before,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > input.task-list-item-checkbox:checked::before,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > p > input.task-list-item-checkbox:checked::before {
<% pseudoElementSettings(i, ts); %>
}
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"],
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > input.task-list-item-checkbox,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"] > p > input.task-list-item-checkbox {
<% checkboxSettings(i, ts); %>
}
<% if (ts.strkethrough || ts.applyTextColor || ts.applyTextBgColor) { %>
.markdown-source-view.mod-cm6 .HyperMD-task-line[data-task="<%~ ts.data %>"],
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"] + span,
.markdown-source-view.mod-cm6 input.task-list-item-checkbox[data-task="<%~ ts.data %>"] + span + span,
.markdown-preview-view ul > li[data-task="<%~ ts.data %>"].task-list-item.is-checked {
<% listElementSettings(i, ts); %>
}
<% } // end strikethrough || applyTextColor || applyTextBgColor%>
<% } // end if unchecked %>

/* Consistent hover colors */
.markdown-source-view.mod-cm6 input.task-list-item-checkbox:hover,
.markdown-source-view.mod-cm6 input.task-list-item-checkbox:checked:hover,
<% it.cfg.taskSettings.forEach(function(ts){ %>
.markdown-preview-view li[data-task="<%~ ts.data %>"] > input.task-list-item-checkbox:checked:hover,
.markdown-preview-view li[data-task="<%~ ts.data %>"] > p > input.task-list-item-checkbox:checked:hover,
<% }) %>
.markdown-preview-view input.task-list-item-checkbox:hover {
    color: var(--text-on-accent) !important;
    background-color: var(--interactive-accent-hover);
    border-color: var(--text-on-accent) !important;
}
`;
